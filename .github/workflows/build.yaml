name: Build and Release for Multiple Platforms and Architectures

on:
  push:
    branches:
      - release  # 仅当推送代码到 release 分支时触发

env:
  VERSION: "0.0.1-alpha"  # 全局变量：版本号

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"


      - name: Create and Activate Virtual Environment (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          python -m venv .venv
          source ./.venv/bin/activate

      - name: Create and Activate Virtual Environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-


      - name: Install Python dependencies in Virtual Environment (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          source ./.venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Executive in Virtual Environment (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          source ./.venv/bin/activate
          pyside6-deploy main.py --init


      - name: Install Python dependencies in Virtual Environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Executive in Virtual Environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
              .\.venv\Scripts\Activate && ^
              pyside6-deploy main.py --init


      - name: Upload Artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-macos-${{ matrix.arch }}
          path: |
            ./*.spec

      - name: Upload Artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-linux-${{ matrix.arch }}
          path: |
            ./*.spec

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-windows-${{ matrix.arch }}
          path: |
            ./*.spec
