name: Build and Release for Multiple Platforms and Architectures

on:
  push:
    branches:
      - release  # 仅当推送代码到 release 分支时触发

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, fedora-latest, macos-latest, windows-latest]
        arch: [x64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt update
            sudo apt install -y alien fakeroot
          elif [ "${{ matrix.os }}" == "fedora-latest" ]; then
            sudo dnf install rpm
          fi

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx_Freeze
          pip install -r requirements.txt

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          pip install toml
          echo "VERSION=$(python -c 'import toml; print(toml.load("pyproject.toml")["project"]["version"])')" >> $GITHUB_ENV

      - name: Build Application
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            cxfreeze bdist_deb
          elif [ "${{ matrix.os }}" == "fedora-latest" ]; then
            cxfreeze bdist_rpm
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            cxfreeze bdist_msi
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            cxfreeze bdist_dmg
          fi

          for file in dist/*; do
            ext="${file##*.}"  # Extract the file extension
            mv "$file" "dist/AirCursor-${{ matrix.os }}-${{ matrix.arch }}_${{ env.VERSION }}.$ext"
          done

      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/release')  # 仅在 release 分支上执行
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: |
            This is a draft release for version ${{ env.VERSION }}.
          draft: true  # 将发布设置为草稿
          files: |
            dist/*${{ matrix.os }}-${{ matrix.arch }}_${{ env.VERSION }}.*