name: Build and Release for Multiple Platforms and Architectures

on:
  push:
    branches:
      - release  # ‰ªÖÂΩìÊé®ÈÄÅ‰ª£Á†ÅÂà∞ release ÂàÜÊîØÊó∂Ëß¶Âèë

env:
  VERSION: "0.0.3-beta"  # ÂÖ®Â±ÄÂèòÈáèÔºöÁâàÊú¨Âè∑

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"



      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y build-essential ccache ruby ruby-dev
          sudo gem install fpm

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ccache create-dmg
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
      
      - name: Install NSIS (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install nsis -y

      - name: Cache Visual Studio Build Tools Installer (Windows)
        if: matrix.os == 'windows-latest'
        id: cache-vs-installer
        uses: actions/cache@v3
        with:
          path: vs_buildtools.exe
          key: ${{ runner.os }}-vsinstaller-2022

      - name: Download Visual Studio Build Tools
        if: matrix.os == 'windows-latest' && steps.cache-vs-installer.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Host "üåê Downloading Visual Studio Build Tools..."
          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vs_buildtools.exe" -OutFile "vs_buildtools.exe"

      - name: Install Visual Studio Build Tools (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "üõ†Ô∏è Installing Visual Studio Build Tools..."
          Start-Process -FilePath ".\vs_buildtools.exe" -ArgumentList `
            "--quiet", `
            "--add", "Microsoft.VisualStudio.Workload.VCTools", `
            "--includeRecommended", `
            "--add", "Microsoft.VisualStudio.Component.VC.Tools.ARM64" `
            -Wait

          Remove-Item -Path ".\vs_buildtools.exe"

      - name: Configure MSVC Environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          :: ËøêË°å vcvarsall.bat ‰ª•ËÆæÁΩÆ MSVC ÁéØÂ¢ÉÂèòÈáè
          CALL "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.arch }}




      - name: Create and Activate Virtual Environment (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          python -m venv .venv
          source ./.venv/bin/activate

      - name: Create and Activate Virtual Environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-



      - name: Install Python dependencies in Virtual Environment (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          source ./.venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Python dependencies in Virtual Environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt



      - name: Build Executive in Virtual Environment (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          source ./.venv/bin/activate
          pyside6-deploy -c build_config/pysidedeploy-${{ matrix.os }}-${{ matrix.arch }}.spec

      - name: Build Executive in Virtual Environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          CALL "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.arch }} && ^
          .\.venv\Scripts\Activate && ^
          pyside6-deploy -c build_config/pysidedeploy-windows-${{ matrix.arch }}.spec

      

      - name: Create DMG file (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          create-dmg \
            --volname "AirCursor" \
            --volicon "./resources/imgs/icon.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "AirCursor-${{ matrix.arch }}.app" 200 190 \
            --hide-extension "AirCursor-${{ matrix.arch }}.app" \
            --app-drop-link 600 185 \
            "AirCursor-macos-${{ matrix.arch }}.dmg" \
            "AirCursor-${{ matrix.arch }}.app"

      - name: Create DEB file (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Êò†Â∞Ñ x64 -> amd64, arm64 -> arm64
          FPM_ARCH="native"
          if [ "${{ matrix.arch }}" = "x64" ]; then
            FPM_ARCH="amd64"
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            FPM_ARCH="arm64"
          fi
        
          fpm -s dir -t deb \
              -n aircursor \
              -a ${FPM_ARCH} \
              -v ${{ env.VERSION }} \
              --url "https://github.com/dev-Vanilla/AirCursor" \
              --description "Control your PC directly with your hands." \
              --maintainer "vanillayhd@outlook.com" \
              --license "AGPL" \
              ./AirCursor-${{ matrix.arch }}.bin=/usr/bin/AirCursor.bin \
              ./build_tmp/16.png=/usr/share/icons/hicolor/16x16/apps/aircursor.png \
              ./build_tmp/32.png=/usr/share/icons/hicolor/32x32/apps/aircursor.png \
              ./build_tmp/64.png=/usr/share/icons/hicolor/64x64/apps/aircursor.png \
              ./build_tmp/128.png=/usr/share/icons/hicolor/128x128/apps/aircursor.png \
              ./build_tmp/256.png=/usr/share/icons/hicolor/256x256/apps/aircursor.png \
              ./build_tmp/512.png=/usr/share/icons/hicolor/512x512/apps/aircursor.png \
              ./build_tmp/1024.png=/usr/share/icons/hicolor/1024x1024/apps/aircursor.png \
              ./build_tmp/AirCursor.desktop=/usr/share/applications/AirCursor.desktop

      - name: Create RPM file (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Êò†Â∞Ñ x64 -> x86_64, arm64 -> aarch64
          FPM_ARCH="native"
          if [ "${{ matrix.arch }}" = "x64" ]; then
            FPM_ARCH="x86_64"
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            FPM_ARCH="aarch64"
          fi

          fpm -s dir -t rpm \
              -n aircursor \
              -a ${FPM_ARCH} \
              -v ${{ env.VERSION }} \
              --url "https://github.com/dev-Vanilla/AirCursor" \
              --description "Control your PC directly with your hands." \
              --maintainer "vanillayhd@outlook.com" \
              --license "AGPL" \
              ./AirCursor-${{ matrix.arch }}.bin=/usr/bin/AirCursor.bin \
              ./build_tmp/16.png=/usr/share/icons/hicolor/16x16/apps/aircursor.png \
              ./build_tmp/32.png=/usr/share/icons/hicolor/32x32/apps/aircursor.png \
              ./build_tmp/64.png=/usr/share/icons/hicolor/64x64/apps/aircursor.png \
              ./build_tmp/128.png=/usr/share/icons/hicolor/128x128/apps/aircursor.png \
              ./build_tmp/256.png=/usr/share/icons/hicolor/256x256/apps/aircursor.png \
              ./build_tmp/512.png=/usr/share/icons/hicolor/512x512/apps/aircursor.png \
              ./build_tmp/1024.png=/usr/share/icons/hicolor/1024x1024/apps/aircursor.png \
              ./build_tmp/AirCursor.desktop=/usr/share/applications/AirCursor.desktop


      - name: Create EXE installer (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          makensis installer-${{ matrix.arch }}.nsi

      - name: Upload Artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-macos-${{ matrix.arch }}
          path: |
            ./*.app
            ./*.dmg

      - name: Upload Artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-linux-${{ matrix.arch }}
          path: |
            ./*.bin
            ./*.deb
            ./*.rpm

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-windows-${{ matrix.arch }}
          path: |
            ./*.exe


  release:
    needs: build
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Draft Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/heads/release')  # ‰ªÖÂú® release ÂàÜÊîØ‰∏äÊâßË°å
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: |
            This is a release for version ${{ env.VERSION }}.
          draft: true  # Â∞ÜÂèëÂ∏ÉËÆæÁΩÆ‰∏∫ËçâÁ®ø
          files: |
            artifacts/build-output-macos-x64/*.dmg
            artifacts/build-output-macos-arm64/*.dmg
            artifacts/build-output-linux-x64/*.bin
            artifacts/build-output-linux-arm64/*.bin
            artifacts/build-output-linux-x64/*.deb
            artifacts/build-output-linux-arm64/*.deb
            artifacts/build-output-linux-x64/*.rpm
            artifacts/build-output-linux-arm64/*.rpm
            artifacts/build-output-windows-x64/*.exe
            artifacts/build-output-windows-arm64/*.exe