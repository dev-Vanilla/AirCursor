name: Build and Release for Multiple Platforms and Architectures

on:
  push:
    branches:
      - release  # 仅当推送代码到 release 分支时触发

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows (x64)
          - os: windows-latest
            artifact_name: AirCursor-Windows-x86_64.msi
            command: bdist_msi
            icon_extension: "ico"
            arch: x64
          # Windows (ARM64)
          - os: windows-latest
            artifact_name: AirCursor-Windows-ARM64.msi
            command: bdist_msi
            icon_extension: "ico"
            arch: arm64

          # macOS (x64) - .app
          - os: macos-latest
            artifact_name: AirCursor-Mac-x86_64.app
            command: bdist_mac
            icon_extension: "icns"
            arch: x64
          # macOS (ARM64) - .app
          - os: macos-latest-arm64
            artifact_name: AirCursor-Mac-ARM64.app
            command: bdist_mac
            icon_extension: "icns"
            arch: arm64

          # macOS (x64) - .dmg
          - os: macos-latest
            artifact_name: AirCursor-Mac-x86_64.dmg
            command: bdist_dmg
            icon_extension: "icns"
            arch: x64
          # macOS (ARM64) - .dmg
          - os: macos-latest-arm64
            artifact_name: AirCursor-Mac-ARM64.dmg
            command: bdist_dmg
            icon_extension: "icns"
            arch: arm64

          # Ubuntu (x64) - .deb
          - os: ubuntu-latest
            artifact_name: AirCursor-Ubuntu-x86_64.deb
            command: bdist_deb
            icon_extension: "svg"
            arch: x64
          # Ubuntu (ARM64) - .deb
          - os: ubuntu-latest-arm64
            artifact_name: AirCursor-Ubuntu-ARM64.deb
            command: bdist_deb
            icon_extension: "svg"
            arch: arm64

          # Fedora (x64) - .rpm
          - os: ubuntu-latest
            artifact_name: AirCursor-Fedora-x86_64.rpm
            command: bdist_rpm
            icon_extension: "svg"
            arch: x64
          # Fedora (ARM64) - .rpm
          - os: ubuntu-latest-arm64
            artifact_name: AirCursor-Fedora-ARM64.rpm
            command: bdist_rpm
            icon_extension: "svg"
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: ${{ matrix.arch }}

      - name: Check system architecture
        run: uname -m || echo "Architecture check failed"

      - name: Install system dependencies
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ] || [ "${{ matrix.os }}" == "ubuntu-latest-arm64" ]; then
            sudo apt-get update
            sudo apt-get install -y linux-headers-$(uname -r)
          elif [ "${{ matrix.os }}" == "macos-latest" ] || [ "${{ matrix.os }}" == "macos-latest-arm64" ]; then
            brew install create-dmg || echo "create-dmg installation skipped"
          fi

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip cx_Freeze
          pip install -r requirements.txt

      - name: Build Application
        run: |
          python -m build --${{ matrix.command }}
          if [ "${{ matrix.os }}" == "macos-latest" ] || [ "${{ matrix.os }}" == "macos-latest-arm64" ]; then
            if [ "${{ matrix.command }}" == "bdist_mac" ]; then
              create-dmg dist/AirCursor-${{ matrix.arch }}.app dist/AirCursor-${{ matrix.arch }}.dmg || echo "DMG creation failed"
            fi
          fi

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          pip install toml
          echo "VERSION=$(python -c 'import toml; print(toml.load("pyproject.toml")["project"]["version"])')" >> $GITHUB_ENV

      - name: Validate build artifacts
        run: |
          if [ ! -f "dist/${{ matrix.artifact_name }}" ]; then
            echo "Error: Artifact dist/${{ matrix.artifact_name }} not found!"
            exit 1
          else
            echo "Artifact validated: dist/${{ matrix.artifact_name }}"
          fi

      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/release')  # 仅在 release 分支上执行
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: |
            This is a draft release for version ${{ env.VERSION }}.
          draft: true  # 将发布设置为草稿
          files: |
            dist/${{ matrix.artifact_name }}