name: Build and Release for Multiple Platforms and Architectures

on:
  push:
    branches:
      - release  # 仅当推送代码到 release 分支时触发

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, fedora-latest, macos-latest, windows-latest]
        arch: [x64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y alien fakeroot libwayland-egl1 rpm

      - name: Install system dependencies (Fedora)
        if: matrix.os == 'fedora-latest'
        run: |
          sudo dnf install -y rpm

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx_Freeze
          pip install -r requirements.txt

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          pip install toml
          echo "VERSION=$(python -c 'import toml; print(toml.load("pyproject.toml")["project"]["version"])')" >> $GITHUB_ENV

      - name: Build Application (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          cxfreeze bdist_msi

      - name: Build Application (macOS/Linux)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            cxfreeze bdist_deb
          elif [ "${{ matrix.os }}" == "fedora-latest" ]; then
            cxfreeze bdist_rpm
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            cxfreeze bdist_dmg
          fi

      - name: Upload Artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-macos-${{ matrix.arch }}
          path: |
            build/*.dmg

      - name: Upload Artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-ubuntu-${{ matrix.arch }}
          path: |
            dist/*.deb

      - name: Upload Artifact (Fedora)
        if: matrix.os == 'fedora-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-fedora-${{ matrix.arch }}
          path: |
            dist/*.rpm

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-output-windows-${{ matrix.arch }}
          path: |
            dist/*.msi

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/release')  # 仅在 release 分支上执行
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: |
            This is a release for version ${{ env.VERSION }}.
          draft: true  # 将发布设置为草稿
          files: |
            artifacts/build-output-macos-x64/*.dmg
            artifacts/build-output-macos-arm64/*.dmg
            artifacts/build-output-ubuntu-x64/*.deb
            artifacts/build-output-ubuntu-arm64/*.deb
            artifacts/build-output-fedora-x64/*.rpm
            artifacts/build-output-fedora-arm64/*.rpm
            artifacts/build-output-windows-x64/*.msi
            artifacts/build-output-windows-arm64/*.msi